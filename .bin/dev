#!/bin/bash
set -ef -o pipefail

# show help
if [[ $1 == "-h" || $1 == "h" || $1 == "help" ]] || [[ -n $1 && $1 != "r" && $1 != "rebuild" && $1 != "s" && $1 != "stop" && $1 != "e" && $1 != "exec" ]]; then
    echo -e "Usage:\n$(basename $BASH_SOURCE) <?command>\nr|rebuild: rebuild container\ns|stop: force stop container\ne|exec: exec command in container"
    exit 0
fi

if grep -sq 'docker\|lxc' /proc/1/cgroup; then
   echo "process is already in a docker container" >&2
   exit 1
fi

set +e
# check if docker is installed
which docker >/dev/null 2>&1
if [[ $? != 0 ]]; then
    echo "docker not installed!!" >&2
    exit 1
fi
set -e

# force stop container
if [[ $1 == "s" || $1 == "stop" ]]; then
    docker stop -t 0 dev >/dev/null
    exit 0
fi

# delete container and update image
if [[ $1 == "r" || $1 == "rebuild" ]]; then
    docker rm -f dev >/dev/null
    docker pull patrickhaussmann/dev
    # continue to run update
fi

if [ ! "$(docker ps -aq -f name=dev)" ]; then
    # container does not exist
    docker create -it --name dev -h dev --net host -v /home/$USER/.ssh:/home/patrick/.ssh:ro -v /home/$USER:/host patrickhaussmann/dev >/dev/null
fi

# ensure container is running
docker start dev >/dev/null
if [ ! "$(docker ps -aq -f status=running -f name=dev)" ]; then
    echo "dev container is in a wierd state" >&2 && echo >&2
    docker ps -aq -f name=dev
    exit 1
fi

# run update if container was rebuild
if [[ $1 == "r" || $1 == "rebuild" ]]; then
    docker exec -it dev bash -ic "update"
    exit 0
fi

WORKDIR="/home/patrick"
# set working dir to pwd
if [[ $PWD/ = /home/$USER/* && $PWD != /home/$USER ]]; then
    WORKDIR=$(pwd | sed "s/home\/$USER/host/g")
fi

if [[ $1 == "e" || $1 == "exec" ]]; then
    shift
    docker exec -it -w "$WORKDIR" dev bash -ic "$*"
else
    docker exec -it -w "$WORKDIR" dev bash
fi

processes=$(docker exec dev sh -c 'echo $(($(ps -e --no-headers | wc -l)-5))') # number of processes minus sh, ps, wc, initial bash, newline of ps

if [[ $processes != 0 ]]; then
    # output to stderr because maybe stdin is redirected or used in a pipe
    echo -n "Do you want to force stop all ($processes) running processes? [y/N] " >&2
    read -n 1 -r
    echo >&2
    if [[ $REPLY = "n" || $REPLY = "N" || -z $REPLY ]];
    then
        exit 0
    fi
fi

docker stop -t 0 dev >/dev/null
